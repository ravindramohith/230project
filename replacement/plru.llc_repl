
#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{

}// Declare a bit array to represent the Pseudo-LRU state for each set
uint8_t plru_state[LLC_WAY];

// Find the index of the victim line to replace
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t victim = 0;

    // Find the index of the least recently used (LRU) line
    for (uint32_t way = 0; way < NUM_WAY; way++) {
        if (block[set][way].lru == 0) {
            victim = way;
            break;
        }
    }

    // If the LRU line is valid, use the Pseudo-LRU state to determine the victim
    if (block[set][victim].valid) {
        // Update the Pseudo-LRU state for the set
        uint8_t plru_bit = 0;
        for (uint32_t way = 0; way < NUM_WAY; way++) {
            if (block[set][way].lru == 1) {
                plru_bit |= (1 << way);
            }
        }
        plru_state[set] = plru_bit;

        // Find the index of the next victim line based on the Pseudo-LRU state
        for (uint32_t way = 0; way < NUM_WAY; way++) {
            if ((plru_state[set] & (1 << way)) == 0) {
                victim = way;
                break;
            }
        }
    }

    return victim;
}

// Update the Pseudo-LRU state on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;
    
    if (hit) {
        // Update the LRU state for the hit line
        block[set][way].lru = NUM_WAY - 1;

        // Update the Pseudo-LRU state for the set
        uint8_t plru_bit = 0;
        for (uint32_t i = 0; i < NUM_WAY; i++) {
            if ((i != way) && (block[set][i].lru > block[set][way].lru)) {
                plru_bit |= (1 << i);
            }
        }
        plru_state[set] = plru_bit;
    } else {
        // Reset the LRU state for the replaced line
        block[set][way].lru = 0;
    }
}

void CACHE::llc_replacement_final_stats()
{

}