#include "cache.h"


// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way = 0;
    uint32_t max_lfu = 0; // initialize max_lfu to the maximum value of unsigned int

    // search for the least frequently used line
    for (way=0; way < NUM_WAY; way++) {
        if (block[set][way].valid == false) {
            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << func << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " count: " << block[set][way].lru << endl; });

            break;
        } else if (block[set][way].lru > max_lfu) {
            max_lfu = block[set][way].lru;
        }
    }

    // if invalid line is found, use it as victim
    if (way < NUM_WAY) {
        return way;
    }

    // if no invalid line is found, search for the least frequently used line
    for (way=0; way < NUM_WAY; way++) {
        if (block[set][way].lru == max_lfu) {
            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << func << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " count: " << block[set][way].lru << endl; });
            break;
        }
    }

   
    return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);
    
    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);
    
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;
    

    if(!hit){
    for (uint32_t i=0; i<NUM_WAY; i++) {
    if (block[set][i].valid) {
        block[set][i].lru++;
    }
    block[set][way].lru = 0; 
    } }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}
